name: CI, Release, and Docker

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  get-tag:
    runs-on: self-hosted
    outputs:
      new_tag: ${{ steps.get_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
      - id: get_tag
        shell: bash
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          if [ -z "$latest_tag" ]; then
            new_tag="v0.0.1"
          else
            IFS='.' read -r major minor patch <<<"${latest_tag#v}"
            patch=$((patch + 1))
            new_tag="v${major}.${minor}.${patch}"
          fi
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

  run-tests:
    name: Run Tests
    runs-on: ubuntu-22.04
    needs: get-tag
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Install Ubuntu dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --fix-missing \
            freeglut3-dev \
            libcurl4-openssl-dev \
            libexpat1-dev \
            libgl1-mesa-dev \
            libglu1-mesa-dev \
            libgtk-3-dev \
            libjpeg-dev \
            libnotify-dev \
            libsdl2-dev \
            libsm-dev \
            libtiff-dev \
            libwebkit2gtk-4.0-dev \
            libxtst-dev \
            libunwind-dev \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev \
            libpng-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            libxcomposite-dev \
            libfreetype6-dev \
            libxi-dev
      - uses: astral-sh/setup-uv@v5
        with:
          python-version: 3.12
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Syncing with UV
        run: uv sync
      - name: Run tests with xvfb
        run: xvfb-run -a bash -c "pytest"
      - name: Minimize uv cache
        run: uv cache prune --ci

  build-win:
    name: Build Windows Packages
    runs-on: windows-latest
    needs: [run-tests, get-tag]
    if: github.event_name == 'push'
    strategy:
      matrix:
        architecture: ["x64"]
        ai_ready: [1]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Put current date into a variable
        run: |
          $DATE=& Get-Date -format yyyy-MM-dd
          echo "DATE=$DATE" >> $env:GITHUB_ENV

      - name: Put current commit hash in a variable
        run: |
          $COMMIT=$(git rev-parse HEAD)
          echo "COMMIT=$COMMIT" >> $env:GITHUB_ENV

      - uses: astral-sh/setup-uv@v5
        with:
          python-version: 3.12
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: install venv and sync dependencies
        run: |
          uv sync --all-extras

      - name: Get InVesalius version
        run: |
          $INVESALIUS_VERSION=$(uv run python -c "import importlib.metadata; print(importlib.metadata.version('invesalius'))")
          echo "INVESALIUS_VERSION=$INVESALIUS_VERSION" >> $env:GITHUB_ENV

      - name: copy .pyd files to invesalius_cy
        run: |
          Copy-Item -Path invesalius_cy\Release\* -Destination invesalius_cy -Recurse -Force

      # --- Download AI weights (same as your current workflow) ---
      - name: Download mandible ai weight
        if: ${{ matrix.ai_ready == 1 }}
        uses: suisei-cn/actions-download-file@818d6b7dc8fe73f2f924b6241f2b1134ca1377d9
        with:
          url: "https://raw.githubusercontent.com/invesalius/weights/main/mandible_ct/mandible_jit_ct.pt"
          target: ./ai/mandible_jit_ct/

      - name: Download cranioplasty binary ai weight
        if: ${{ matrix.ai_ready == 1 }}
        uses: suisei-cn/actions-download-file@818d6b7dc8fe73f2f924b6241f2b1134ca1377d9
        with:
          url: "https://raw.githubusercontent.com/invesalius/weights/main/cranioplasty_jit_ct_binary/cranioplasty_jit_ct_binary.pt"
          target: ./ai/cranioplasty_jit_ct_binary/

      - name: Download cranioplasty gray ai weight
        if: ${{ matrix.ai_ready == 1 }}
        uses: suisei-cn/actions-download-file@818d6b7dc8fe73f2f924b6241f2b1134ca1377d9
        with:
          url: "https://raw.githubusercontent.com/invesalius/weights/main/cranioplasty_jit_ct_gray/cranioplasty_jit_ct_gray.pt"
          target: ./ai/cranioplasty_jit_ct_gray/

      - name: Download trachea ai weight
        if: ${{ matrix.ai_ready == 1 }}
        uses: suisei-cn/actions-download-file@818d6b7dc8fe73f2f924b6241f2b1134ca1377d9
        with:
          url: "https://github.com/tfmoraes/deep_trachea_torch/releases/download/v1.0/weights.pt"
          target: ./ai/trachea_ct/

      - name: Fix trachea name ai weight
        if: ${{ matrix.ai_ready == 1 }}
        run: |
          move ./ai/trachea_ct/weights.pt ./ai/trachea_ct/trachea_ct.pt

      - name: Download brain ai weight
        if: ${{ matrix.ai_ready == 1 }}
        uses: suisei-cn/actions-download-file@818d6b7dc8fe73f2f924b6241f2b1134ca1377d9
        with:
          url: "https://github.com/tfmoraes/deepbrain_torch/releases/download/v1.1.0/weights.pt"
          target: ./ai/brain_mri_t1/

      - name: Fix brain name ai weight
        if: ${{ matrix.ai_ready == 1 }}
        run: |
          move ./ai/brain_mri_t1/weights.pt ./ai/brain_mri_t1/brain_mri_t1.pt

      # --- Build and package ---
      - name: Generate InVesalius .exe file
        run: |
          cp ./bundle_tools/win/app.spec ./  
          uv run pyinstaller app.spec --clean --noconfirm
          mkdir installer

      - name: Generate InVesalius installer - win64 ai-ready build
        run: ISCC.exe /Oinstaller /F"invesalius_win64" /DMyAppVersion=${{ env.INVESALIUS_VERSION }} ./bundle_tools/win/generate_installer.iss

      - name: Show files
        run: |
          cd ./installer
          dir

      - name: Upload artifact of package ai-ready file
        if: ${{ matrix.ai_ready == 1 }}
        uses: actions/upload-artifact@v4
        with:
          overwrite: true
          name: invesalius_package_exe_ai-ready
          retention-days: 2
          path: ./installer/*.exe

  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-22.04
    needs: [run-tests, get-tag]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install toml
        run: python3 -m pip install toml

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(python3 -c "import toml; print(toml.load('pyproject.toml').get('project', {}).get('version') or toml.load('pyproject.toml').get('tool', {}).get('poetry', {}).get('version'))")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:latest -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:${{ needs.get-tag.outputs.new_tag }} .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:${{ needs.get-tag.outputs.new_tag }}

  publish_packages:
    name: Publish Packages and Release
    needs: [build-win, build-and-push-docker, get-tag]
    runs-on: windows-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: invesalius_package_exe_ai-ready
          path: ./

      - name: Message
        run: |
          dir

      - name: Get commit message/body for release notes
        id: get_commit
        run: |
          echo "desc<<EOF" >> $GITHUB_OUTPUT
          echo "${{ github.event.head_commit.message }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.get-tag.outputs.new_tag }}
          name: "Release ${{ needs.get-tag.outputs.new_tag }}"
          body: ${{ steps.get_commit.outputs.desc }}
          draft: false
          prerelease: false
          files: |
            ./*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}